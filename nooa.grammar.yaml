version: 1.1
language: typescript

# Nooa Core Engine - Self-Validating Grammar
# This grammar validates the Nooa Core Engine itself against Clean Architecture principles
# Demonstrates all v1.1 features: circular detection, required dependencies, and naming patterns

roles:
  - name: NOUN
    path: "^src/domain/models"
    description: "Domain Models - Pure business entities"

  - name: NOUN_TEST_SUPPORT
    path: "^src/domain/mocks"
    description: "Domain test support factories and fixtures"

  - name: VERB_CONTRACT
    path: "^src/domain/usecases"
    description: "Domain Use Cases - Business capability interfaces"

  - name: VERB_IMPLEMENTATION_ACTUAL
    path: "^src/data/usecases/.*\\.usecase\\.ts$"
    description: "Actual use case implementation files (excluding index.ts)"

  - name: VERB_IMPLEMENTATION
    path: "^src/data/usecases"
    description: "Data Use Cases - Application logic implementations"

  - name: ADVERB_ABSTRACT
    path: "^src/data/protocols"
    description: "Data Protocols - Interface definitions for infrastructure"

  - name: ADVERB_CONCRETE_ACTUAL
    path: "^src/infra/.*(adapter|repository)\\.ts$"
    description: "Actual infrastructure implementations (excluding index.ts)"

  - name: ADVERB_CONCRETE
    path: "^src/infra"
    description: "Infrastructure - Concrete implementations (parsers, repositories, validators)"

  - name: CONTEXT_ACTUAL
    path: "^src/presentation/controllers/.*\\.controller\\.ts$"
    description: "Actual controller files (excluding index.ts)"

  - name: CONTEXT_CONTROLLER
    path: "^src/presentation/controllers"
    description: "Presentation Controllers - External interface adapters"

  - name: CONTEXT_MIDDLEWARE_ACTUAL
    path: "^src/presentation/middlewares/.*\\.middleware\\.ts$"
    description: "Actual middleware implementations (excluding index.ts)"

  - name: CONTEXT_MIDDLEWARE
    path: "^src/presentation/middlewares"
    description: "Presentation middlewares"

  - name: CONTEXT_PROTOCOL
    path: "^src/presentation/protocols"
    description: "Presentation protocols (HTTP contracts, validation interface)"

  - name: CONTEXT_HELPER
    path: "^src/presentation/helpers"
    description: "Presentation helpers (HTTP helpers, response builders)"

  - name: CONTEXT_ERROR
    path: "^src/presentation/errors"
    description: "Presentation-level error types"

  - name: CONTEXT
    path: "^src/presentation"
    description: "Presentation layer umbrella role"

  - name: VALIDATION_IMPLEMENTATION_ACTUAL
    path: "^src/validation/validators/.*validation\\.ts$"
    description: "Actual validation implementations (excluding index.ts)"

  - name: VALIDATION_IMPLEMENTATION
    path: "^src/validation/validators"
    description: "Validation layer validators"

  - name: VALIDATION_PROTOCOL
    path: "^src/validation/protocols"
    description: "Validation layer protocols"

  - name: COMPOSER_CONTROLLER_FACTORY
    path: "^src/main/factories/controllers"
    description: "Composition root factories for controllers"

  - name: COMPOSER_VALIDATION_FACTORY
    path: "^src/main/factories/(validators|controllers/.+validation-factory)"
    description: "Composition root factories dedicated to validation wiring"

  - name: COMPOSER
    path: "^src/main"
    description: "Main - Composition root and dependency injection"

  # ============================================================================
  # Test Roles - Mirror production layers for architectural verification
  # ============================================================================
  - name: TEST_DOMAIN_LEXICON
    path: "^tests/domain/mocks"
    description: "Domain layer vocabulary (pure mocks/helpers) used in tests"

  - name: TEST_DATA_MOCK
    path: "^tests/data/mocks"
    description: "Data layer test doubles (repositories, cryptography spies)"

  - name: TEST_DATA_SPEC
    path: "^tests/data/usecases"
    description: "Data layer unit tests validating Db use cases"

  - name: TEST_INFRA_SPEC
    path: "^tests/infra"
    description: "Infrastructure adapter and repository tests (integration/unit)"

  - name: TEST_PRESENTATION_MOCK
    path: "^tests/presentation/mocks"
    description: "Presentation layer mocks/spies"

  - name: TEST_PRESENTATION_SPEC
    path: "^tests/presentation/(controllers|middlewares)"
    description: "Presentation layer controller and middleware tests"

  - name: TEST_VALIDATION_MOCK
    path: "^tests/validation/mocks"
    description: "Validation layer mocks/stubs"

  - name: TEST_VALIDATION_SPEC
    path: "^tests/validation/validators"
    description: "Validation layer unit tests"

  - name: TEST_MAIN_SPEC
    path: "^tests/main"
    description: "Composition root, routes, decorators and e2e-style tests"

rules:
  - name: "Domain-Independence"
    severity: error
    comment: "Domain layer (models and use case interfaces) must remain pure and independent of all outer layers"
    from:
      role: [NOUN, VERB_CONTRACT]
    to:
      role:
        - VERB_IMPLEMENTATION
        - VERB_IMPLEMENTATION_ACTUAL
        - ADVERB_ABSTRACT
        - ADVERB_CONCRETE
        - ADVERB_CONCRETE_ACTUAL
        - CONTEXT
        - CONTEXT_CONTROLLER
        - CONTEXT_ACTUAL
        - CONTEXT_MIDDLEWARE
        - CONTEXT_MIDDLEWARE_ACTUAL
        - CONTEXT_PROTOCOL
        - CONTEXT_HELPER
        - CONTEXT_ERROR
        - VALIDATION_IMPLEMENTATION
        - VALIDATION_IMPLEMENTATION_ACTUAL
        - VALIDATION_PROTOCOL
        - COMPOSER
        - COMPOSER_CONTROLLER_FACTORY
        - COMPOSER_VALIDATION_FACTORY
        - NOUN_TEST_SUPPORT
        - TEST_DOMAIN_LEXICON
        - TEST_DATA_MOCK
        - TEST_DATA_SPEC
        - TEST_INFRA_SPEC
        - TEST_PRESENTATION_MOCK
        - TEST_PRESENTATION_SPEC
        - TEST_VALIDATION_MOCK
        - TEST_VALIDATION_SPEC
        - TEST_MAIN_SPEC
    rule: "forbidden"

  - name: "Data-Dependency-Inversion"
    severity: error
    comment: "Data layer use case implementations must depend on protocols (abstractions), never on concrete infrastructure"
    from:
      role: [VERB_IMPLEMENTATION]
    to:
      role:
        - ADVERB_CONCRETE
        - ADVERB_CONCRETE_ACTUAL
    rule: "forbidden"

  - name: "Presentation-Isolation"
    severity: error
    comment: "Presentation layer must not directly depend on infrastructure implementations"
    from:
      role:
        - CONTEXT
        - CONTEXT_CONTROLLER
        - CONTEXT_ACTUAL
        - CONTEXT_MIDDLEWARE
        - CONTEXT_MIDDLEWARE_ACTUAL
        - CONTEXT_PROTOCOL
        - CONTEXT_HELPER
        - CONTEXT_ERROR
    to:
      role:
        - ADVERB_CONCRETE
        - ADVERB_CONCRETE_ACTUAL
    rule: "forbidden"

  - name: "Protocol-Purity"
    severity: error
    comment: "Data protocols must remain abstract and not depend on concrete implementations"
    from:
      role: [ADVERB_ABSTRACT]
    to:
      role:
        - ADVERB_CONCRETE
        - ADVERB_CONCRETE_ACTUAL
        - CONTEXT
        - CONTEXT_CONTROLLER
        - CONTEXT_ACTUAL
        - CONTEXT_MIDDLEWARE
        - CONTEXT_MIDDLEWARE_ACTUAL
        - CONTEXT_PROTOCOL
        - CONTEXT_HELPER
        - CONTEXT_ERROR
        - VALIDATION_IMPLEMENTATION
        - VALIDATION_IMPLEMENTATION_ACTUAL
        - VALIDATION_PROTOCOL
    rule: "forbidden"

  - name: "Validation-Protocol-Purity"
    severity: error
    comment: "Validation protocols must remain abstract and independent from infrastructure or data layers"
    from:
      role: [VALIDATION_PROTOCOL]
    to:
      role:
        - ADVERB_CONCRETE
        - ADVERB_CONCRETE_ACTUAL
        - VERB_IMPLEMENTATION
        - VERB_IMPLEMENTATION_ACTUAL
        - ADVERB_ABSTRACT
        - COMPOSER
        - COMPOSER_CONTROLLER_FACTORY
        - COMPOSER_VALIDATION_FACTORY
    rule: "forbidden"

  - name: "Validation-Isolation"
    severity: error
    comment: "Validation implementations should only rely on presentation contracts and validation protocols"
    from:
      role:
        - VALIDATION_IMPLEMENTATION
        - VALIDATION_IMPLEMENTATION_ACTUAL
    to:
      role:
        - VERB_IMPLEMENTATION
        - VERB_IMPLEMENTATION_ACTUAL
        - ADVERB_ABSTRACT
        - ADVERB_CONCRETE
        - ADVERB_CONCRETE_ACTUAL
        - COMPOSER
        - COMPOSER_CONTROLLER_FACTORY
    rule: "forbidden"

  - name: "Data-No-Presentation"
    severity: warning
    comment: "Data layer should not depend on presentation layer"
    from:
      role:
        - VERB_IMPLEMENTATION
        - ADVERB_ABSTRACT
    to:
      role:
        - CONTEXT
        - CONTEXT_CONTROLLER
        - CONTEXT_ACTUAL
        - CONTEXT_MIDDLEWARE
        - CONTEXT_MIDDLEWARE_ACTUAL
        - CONTEXT_PROTOCOL
        - CONTEXT_HELPER
        - CONTEXT_ERROR
    rule: "forbidden"

  - name: "Presentation-No-Data"
    severity: error
    comment: "Presentation layer must not depend on data layer implementations or protocols"
    from:
      role:
        - CONTEXT
        - CONTEXT_CONTROLLER
        - CONTEXT_ACTUAL
        - CONTEXT_MIDDLEWARE
        - CONTEXT_MIDDLEWARE_ACTUAL
        - CONTEXT_PROTOCOL
        - CONTEXT_HELPER
        - CONTEXT_ERROR
    to:
      role:
        - VERB_IMPLEMENTATION
        - VERB_IMPLEMENTATION_ACTUAL
        - ADVERB_ABSTRACT
    rule: "forbidden"

  # ============================================================================
  # V1.1 FEATURES: Demonstrating advanced validation capabilities
  # ============================================================================

  # Feature 1: Circular Dependency Detection
  - name: "No-Circular-Dependencies"
    severity: error
    comment: "Circular dependencies are the most destructive architectural flaw and must be eliminated"
    from:
      role: ALL
    to:
      circular: true
    rule: "forbidden"

  # Feature 2: Required Dependencies (Enforce Good Practices)
  # Note: Uses specialized roles to exclude barrel export files (index.ts)
  - name: "Use-Case-Implementations-Must-Implement-Contracts"
    severity: error
    comment: "Every use case implementation must depend on its corresponding domain contract"
    from:
      role: VERB_IMPLEMENTATION_ACTUAL
    to:
      role: VERB_CONTRACT
    rule: "required"

  - name: "Adapters-Must-Implement-Protocols"
    severity: error
    comment: "Infrastructure adapters must implement data or validation layer protocols for proper dependency inversion"
    from:
      role: ADVERB_CONCRETE_ACTUAL
    to:
      role:
        - ADVERB_ABSTRACT
        - VALIDATION_PROTOCOL
    rule: "required"

  - name: "Controllers-Must-Use-Domain"
    severity: error
    comment: "Presentation controllers must orchestrate through domain use cases, not bypass them"
    from:
      role: CONTEXT_ACTUAL
    to:
      role: VERB_CONTRACT
    rule: "required"

  - name: "Middlewares-Must-Use-Domain"
    severity: error
    comment: "Presentation middlewares must delegate to domain contracts"
    from:
      role: CONTEXT_MIDDLEWARE_ACTUAL
    to:
      role: VERB_CONTRACT
    rule: "required"

  - name: "Validators-Implement-Presentation-Contract"
    severity: error
    comment: "Validation implementations must implement the presentation Validation interface"
    from:
      role: VALIDATION_IMPLEMENTATION_ACTUAL
    to:
      role: CONTEXT_PROTOCOL
    rule: "required"

  # Feature 3: Naming Pattern Validation
  # Note: index.ts files are barrel exports and are exempt from naming conventions
  - name: "Adapter-Files-Follow-Convention"
    severity: warning
    comment: "Infrastructure files should follow the .adapter.ts or .repository.ts naming convention"
    for:
      role: ADVERB_CONCRETE
    pattern: "(\\.(adapter|repository)\\.ts|/index\\.ts)$"
    rule: "naming_pattern"

  - name: "UseCase-Files-Follow-Convention"
    severity: warning
    comment: "Use case implementation files should follow the .usecase.ts naming convention"
    for:
      role: VERB_IMPLEMENTATION
    pattern: "(\\.usecase\\.ts|/index\\.ts)$"
    rule: "naming_pattern"

  - name: "Controller-Files-Follow-Convention"
    severity: warning
    comment: "Controller files should follow the .controller.ts naming convention"
    for:
      role: CONTEXT_ACTUAL
    pattern: "(\\.controller\\.ts|/index\\.ts)$"
    rule: "naming_pattern"

  - name: "Middleware-Files-Follow-Convention"
    severity: warning
    comment: "Middleware files should follow the .middleware.ts naming convention"
    for:
      role: CONTEXT_MIDDLEWARE_ACTUAL
    pattern: "(\\.middleware\\.ts|/index\\.ts)$"
    rule: "naming_pattern"

  - name: "Validation-Files-Follow-Convention"
    severity: warning
    comment: "Validation files should follow the -validation.ts naming convention"
    for:
      role: VALIDATION_IMPLEMENTATION_ACTUAL
    pattern: "(validation\\.ts|validation-composite\\.ts|/index\\.ts)$"
    rule: "naming_pattern"

  # ============================================================================
  # HYGIENE RULES: Code Quality and Maintainability
  # ============================================================================

  # Hygiene Feature 1: Synonym Detection (Prevents Code Duplication)
  # Note: Only check actual implementation files, not barrel exports
  - name: "Detect-Duplicate-Use-Cases"
    severity: warning
    comment: "Detects use cases with very similar names, suggesting potential duplication of logic"
    for:
      role: VERB_IMPLEMENTATION_ACTUAL
    options:
      similarity_threshold: 0.85
      thesaurus:
        - [Analyze, Validate, Check, Verify]
        - [Load, Fetch, Get, Retrieve]
        - [Parse, Process, Transform]
    rule: "find_synonyms"

  - name: "Detect-Duplicate-Adapters"
    severity: warning
    comment: "Detects adapters with very similar names, suggesting potential duplication"
    for:
      role: ADVERB_CONCRETE_ACTUAL
    options:
      similarity_threshold: 0.85
      thesaurus:
        - [Parser, Adapter, Repository, Validator]
        - [Yaml, Yml, JSON]
    rule: "find_synonyms"

  # Hygiene Feature 2: Unreferenced Code Detection (Zombie Files)
  - name: "Detect-Zombie-Files"
    severity: info
    comment: "Detects files that are not imported by any other file, indicating potentially dead code"
    for:
      role: ALL
    options:
      ignore_patterns:
        - "^src/main/server\\.ts$"
        - "/index\\.ts$"
        - "\\.spec\\.ts$"
        - "\\.test\\.ts$"
        - "^tests/"
    rule: "detect_unreferenced"

  # ============================================================================
  # Test Containment Rules
  # ============================================================================
  - name: "Production-Does-Not-Depend-On-Tests"
    severity: error
    comment: "Production code must never depend on test files or fixtures"
    from:
      role:
        - NOUN
        - NOUN_TEST_SUPPORT
        - VERB_CONTRACT
        - VERB_IMPLEMENTATION
        - VERB_IMPLEMENTATION_ACTUAL
        - ADVERB_ABSTRACT
        - ADVERB_CONCRETE
        - ADVERB_CONCRETE_ACTUAL
        - CONTEXT
        - CONTEXT_CONTROLLER
        - CONTEXT_ACTUAL
        - CONTEXT_MIDDLEWARE
        - CONTEXT_MIDDLEWARE_ACTUAL
        - CONTEXT_PROTOCOL
        - CONTEXT_HELPER
        - CONTEXT_ERROR
        - VALIDATION_IMPLEMENTATION
        - VALIDATION_IMPLEMENTATION_ACTUAL
        - VALIDATION_PROTOCOL
        - COMPOSER
        - COMPOSER_CONTROLLER_FACTORY
        - COMPOSER_VALIDATION_FACTORY
    to:
      role:
        - TEST_DOMAIN_LEXICON
        - TEST_DATA_MOCK
        - TEST_DATA_SPEC
        - TEST_INFRA_SPEC
        - TEST_PRESENTATION_MOCK
        - TEST_PRESENTATION_SPEC
        - TEST_VALIDATION_MOCK
        - TEST_VALIDATION_SPEC
        - TEST_MAIN_SPEC
    rule: "forbidden"


  # ============================================================================
  # NEW CRITICAL RULES: Based on architectural analysis (Oct 2025)
  # These rules address the issues found when comparing with clean-ts-api
  # ============================================================================

  # 1. TEST COVERAGE ENFORCEMENT (Priority: CRITICAL)
  # Current: 0 test files | Target: Every production file must have tests
  # NOTE: This rule requires a new rule type 'test_coverage' not yet implemented
  - name: "Test-Coverage-Required"
    severity: error
    comment: "AI NOTE: Production file has no corresponding test file - zero test coverage, unacceptable risk. REFACTOR: Create test file following naming convention. Mirror directory structure: src/path/file.ts → tests/path/file.spec.ts. Write unit tests covering: (1) happy path scenarios, (2) error cases with proper error handling, (3) edge cases and boundary conditions, (4) all public methods and interfaces. Use proper mocking for dependencies. Aim for >80% code coverage, 100% for critical paths. EXAMPLE: src/presentation/presenters/cli-violation.presenter.ts (no tests) → create tests/presentation/presenters/cli-violation.presenter.spec.ts with tests for: displayUsage() (verify console output), displayResults() (test formatting for 0/1/many violations), displayError() (test error formatting, stack traces), displayMetrics() (test performance display). Mock console.log/error. Verify output format. BENEFIT: Prevents regressions, enables confident refactoring, documents expected behavior, catches bugs early in development cycle, provides executable specification."
    from:
      role: [VERB_IMPLEMENTATION_ACTUAL, ADVERB_CONCRETE_ACTUAL, CONTEXT_ACTUAL]
    to:
      test_file: required
    rule: "test_coverage"

  # 2. FILE SIZE LIMITS (Priority: HIGH)
  # Current: 87.3 LOC/file average | Target: < 100 LOC/file
  # NOTE: Requires 'file_size' rule type not yet implemented
  - name: "File-Size-Warning"
    severity: warning
    comment: "Files should not exceed 100 lines to maintain SRP (current avg: 87.3 LOC)"
    for:
      role: ALL
    max_lines: 100
    rule: "file_size"

  - name: "File-Size-Error"
    severity: error
    comment: "AI NOTE: File exceeds 200 lines - violates Single Responsibility Principle. REFACTOR: Identify distinct responsibilities in file. Extract each responsibility into separate class/file. Apply Extract Class pattern. Split by functional cohesion. EXAMPLE: If analyze-codebase.usecase.ts has 1497 lines with validation+detection+transformation mixed, extract into: (1) NamingPatternValidator class (66 lines), (2) DependencyValidator class (224 lines), (3) HygieneValidator class (143 lines), (4) FileMetricsValidator class (66 lines), (5) StringSimilarityHelper class (163 lines). Main file becomes coordinator (178 lines). BENEFIT: Each file has single concern, easier to test in isolation, better maintainability, clearer responsibilities, enables parallel development, P2P-ready modular architecture."
    for:
      role: ALL
    max_lines: 200
    rule: "file_size"

  # 3. VALIDATION LAYER REQUIREMENTS (Priority: CRITICAL)
  # Current: No validation layer | Target: Mandatory validation layer
  - name: "Controllers-Must-Use-Validators"
    severity: error
    comment: "Controllers must use validation layer instead of embedding validation logic"
    from:
      role: CONTEXT_ACTUAL
    to:
      role: [VALIDATION_IMPLEMENTATION, VALIDATION_PROTOCOL]
    rule: "required"

  # 4. FACTORY PATTERN ENFORCEMENT (Priority: HIGH)
  # Current: 3 factories | Target: Factory for each controller/use case
  - name: "Controllers-Need-Factories"
    severity: error
    comment: "All controllers must be instantiated through factories for proper DI"
    from:
      role: COMPOSER
    to:
      role: COMPOSER_CONTROLLER_FACTORY
    rule: "required"

  # 5. SINGLE RESPONSIBILITY ENFORCEMENT (Priority: HIGH)
  # Prevents consolidation of multiple responsibilities in one file
  # NOTE: Requires 'forbidden_keywords' rule type not yet implemented
  - name: "No-Business-Logic-In-Controllers"
    severity: error
    comment: "AI NOTE: Controller contains business logic keywords (calculate/compute/transform/process/validate) - violates separation of concerns, breaks Clean Architecture boundaries. REFACTOR: Extract business logic to use case or domain service. Controller should ONLY: (1) receive input from external interface, (2) call use case with validated input, (3) format response for external interface. Controller is thin adapter, not business logic container. EXAMPLE: If CliController has 'process.exit(hasErrors ? 1 : 0)' logic, extract to use case: ExitCodeDeterminer.execute(violations). Controller becomes: exitCode = await this.determineExitCode.execute(violations); this.exitHandler.exit(exitCode). Business rule (violations → exit code mapping) moves to use case, testable independently. BENEFIT: Business logic reusable across interfaces (CLI/HTTP/GraphQL), testable in isolation without mocking presentation layer, controller stays thin and focused on interface adaptation, follows Clean Architecture dependency rule."
    from:
      role: CONTEXT_ACTUAL
    contains_forbidden:
      - "calculate"
      - "compute"
      - "transform"
      - "process"
      - "parse"
      - "validate"
      - "isValid"
    rule: "forbidden_keywords"

  # 6. MINIMUM TEST RATIO (Priority: HIGH)
  # Current: 0% test files | Target: 20% minimum (best practice: 24.6%)
  - name: "Minimum-Test-File-Ratio"
    severity: warning
    comment: "Project should have at least 20% test files (current: 0%, target: 20%+)"
    global:
      test_ratio: 0.20
    rule: "minimum_test_ratio"

  # 7. REQUIRED ARCHITECTURAL LAYERS (Priority: CRITICAL)
  # Current: Missing validation layer | Target: All Clean Architecture layers
  # NOTE: Requires 'required_structure' rule type not yet implemented
  - name: "All-Clean-Architecture-Layers-Required"
    severity: error
    comment: "Clean Architecture requires all layers to be present"
    required_directories:
      - "src/domain/models"
      - "src/domain/usecases"
      - "src/data/protocols"
      - "src/data/usecases"
      - "src/infra"
      - "src/presentation/controllers"
      - "src/validation/validators"
      - "src/main/factories"
    rule: "required_structure"

  # 8. DOCUMENTATION FOR COMPLEX FILES (Priority: MEDIUM)
  # Current: No JSDoc | Target: JSDoc for files > 50 lines
  # NOTE: Requires 'documentation_required' rule type not yet implemented
  - name: "Complex-Files-Need-Documentation"
    severity: warning
    comment: "Files over 50 lines should have JSDoc documentation"
    for:
      role: ALL
    min_lines: 50
    requires_jsdoc: true
    rule: "documentation_required"

  # 9. GOD OBJECT PREVENTION (Priority: HIGH)
  # Prevents classes with too many responsibilities
  # NOTE: Requires 'class_complexity' rule type not yet implemented
  - name: "No-God-Objects"
    severity: error
    comment: "AI NOTE: Class has >10 public methods or >15 properties - God Object anti-pattern detected. REFACTOR: Apply Extract Class pattern. Group related methods/properties by responsibility. Create focused classes with single responsibility. Each class should do ONE thing well. EXAMPLE: If UserService has 20 methods (createUser, deleteUser, login, logout, updateProfile, getProfile, changePassword, resetPassword, sendNotification, etc), extract into: UserAuthService (login, logout, changePassword, resetPassword - 4 methods), UserProfileService (getProfile, updateProfile - 2 methods), UserCRUDService (createUser, deleteUser - 2 methods), UserNotificationService (sendNotification, subscribe - 2 methods). Each service has <5 methods, clear single responsibility. BENEFIT: Better testability (test each service independently), clearer responsibilities, easier maintenance, follows SRP, enables team parallelization, reduces cognitive load."
    for:
      role: ALL
    max_public_methods: 10
    max_properties: 15
    rule: "class_complexity"

  # 10. FILE GRANULARITY CHECK (Priority: MEDIUM)
  # Current: 22 files | Expected: ~138 files based on LOC/file ratio
  - name: "File-Granularity-Check"
    severity: info
    comment: "Project should have adequate file granularity (target: 10-20 LOC/file)"
    global:
      target_loc_per_file: 20
      warning_threshold_multiplier: 4.0
    rule: "granularity_metric"

  # 11. NO VALIDATION IN CONTROLLERS (Priority: CRITICAL)
  # Enforces separation of validation from presentation layer
  - name: "Validation-Logic-Not-In-Controllers"
    severity: error
    comment: "Controllers must not contain validation logic - use validation layer"
    from:
      role: CONTEXT_ACTUAL
    contains_forbidden:
      - "RegExp"
      - "regex"
      - "pattern"
      - "\\.match\\("
      - "\\.test\\("
      - "isValid"
      - "validate"
    rule: "forbidden_patterns"

  # 12. BARREL EXPORT PURITY (Priority: LOW)
  # index.ts files should only re-export, not contain logic
  - name: "Barrel-Exports-Must-Be-Pure"
    severity: warning
    comment: "Barrel exports (index.ts) should only re-export, not contain logic"
    for:
      file_pattern: "/index\\.ts$"
    contains_forbidden:
      - "class "
      - "function "
      - "const.*=.*\\{"
      - "if.*\\{"
      - "for.*\\{"
      - "while.*\\{"
    rule: "barrel_purity"

  # ============================================================================
  # FUTURE RULES (Not Yet Implemented - Require New Rule Types)
  # ============================================================================
  # These rules document architectural insights discovered through dogfooding
  # but cannot be enforced yet because the rule engine doesn't support these
  # rule types. They serve as TODOs for future Nooa development.
  
  # 13. INTERFACE SEGREGATION PRINCIPLE (Priority: CRITICAL)
  # Discovered through RECURSION BUG: interfaces with multiple methods can have
  # mixed responsibilities, causing layer ambiguity and architectural thrashing.
  # 
  # Real case: ICommandLineAdapter with 3 methods created infinite loop:
  # - getArgs() → Presentation concern
  # - getEnv() → Data concern  
  # - exit() → Presentation concern
  # Result: Interface belonged to NO layer clearly, creating recursion between
  # presentation/protocols ↔ data/protocols (THRASHING!)
  #
  # Solution: Split into 3 segregated interfaces (1 method each):
  # - IProcessArgsProvider (presentation)
  # - IProcessEnvProvider (data)
  # - IProcessExitHandler (presentation)
  # Result: ZERO recursion, each interface in correct layer!
  #
  # TODO: Implement 'interface_method_count' rule type
  # - name: "Interface-Segregation-Principle"
  #   severity: warning
  #   comment: "Interfaces should have at most 2 methods to prevent mixed responsibilities and layer ambiguity. Multi-method interfaces can belong to multiple layers, causing architectural recursion/thrashing."
  #   for:
  #     role:
  #       - ADVERB_ABSTRACT
  #       - CONTEXT_PROTOCOL
  #       - VALIDATION_PROTOCOL
  #       - VERB_CONTRACT
  #   max_methods_per_interface: 2
  #   rule: "interface_method_count"
